
/************** F R O M  C P C D O S   W R A P P E R **************/

#define gui_window 		1
#define gui_button 		2
#define gui_picturebox 	3
#define gui_textblock	4
#define gui_textbox 	5
#define gui_progressbar 6
#define gui_checkbox 	7
#define gui_explorer 	8
#define gui_listbox 	9

extern long					cpc_create_gui_objet		(long windowhandle, long context_INDEX, long obj_type, long pos_x, long pos_y, long siz_x, long siz_y, const char* text, const char* class_name, const char* image, const char* parameters);

// ---- Buffer / context from Cpcdos ---- //
extern long					cpc_create_viewport			(long idx, long Size_X, long Size_Y);
extern void*				cpc_get_viewport_ptr		(long viewport_bitmap_id);
extern long					cpc_get_id_from_handle		(long win_handle);

extern long					cpc_Creer_Contexte			(long TAILLEX, long TAILLEYn);
extern void*				cpc_Obtenir_Zone_Contexte	(long ID);
extern long					cpc_Blitter					(long ID);

// ---- User input from cpcdos ---- //
extern long					cpc_mouse_state_lck			(long param, long id_context); /* 0:Clic state (1:left 2:right 3:middle) | 1:Position X | 2:Position Y | 3:Scrool wheel */
extern long					cpc_set_mouse_lck			(long px, long py, bool visible, long id_context);
extern long					cpc_get_key_lck				(long id_context);




/************** F R O M   C P I N T I   C O R E   W R A P P E R **************/

// ---- Create thread ---- //
extern unsigned long 		xe_cpinti_creer_thread		(void* (* Fonction) (void * arg), unsigned long stackSize, void* threadParam, bool ExecuteThreadNow);

// ---- Doevent (Calling CPinti Core scheduler) ---- //
extern void 				xe_cpinti_doevents			(unsigned long time_ms);

// ---- Getting threads info ---- //
extern unsigned long 		xe_cpinti_get_ThreadEnCours	();

// ---- Getting process infos ---- //
extern unsigned long 		xe_cpinti_get_pid_from_tid	();
// extern unsigned long 		xe_cpinti_get_pid_from_tid	(unsigned long time_ms);


// ---- Critical section  ---- //
extern void 				xe_cpinti_ENTRER_SectionCritique();
extern void 				xe_cpinti_SORTIR_SectionCritique();


/**********************************************************************/

int UserInputUpdate(uint32_t h, long id_context);


uint32_t Create_context(ContextInf _ctx)
{
	// Create context buffer and return INDEX number

	aContext_count++; //Important: Skip the zero index (NULL)
	int ctx_INDEX = aContext_count;
	
	aContext[ctx_INDEX] = _ctx;

	if(aContext[ctx_INDEX].width > 10)
	{
		// Create and get bitmap ID from Cpcdos
		aContext[ctx_INDEX].id_context = cpc_create_viewport((long) ctx_INDEX, (long) aContext[ctx_INDEX].width, (long)aContext[ctx_INDEX].height);
		showinf("Create_context() cpc_create_viewport()= ctx_INDEX: %d, id.hwnd_View: %d id.context: %zu, height: %d, width: %d", ctx_INDEX, aContext[ctx_INDEX].hwnd_View, aContext[ctx_INDEX].id_context, aContext[ctx_INDEX].height,  aContext[ctx_INDEX].width);
		
		// Getting pixels context
		aContext[ctx_INDEX].pixels = cpc_get_viewport_ptr((long) aContext[ctx_INDEX].id_context);
		showinf("Create_context() viewport video ptr [0x%08x]", aContext[ctx_INDEX].pixels);

	}
	else
	{
		showinf("ERROR: Create_context() width and height must greater than 10. Width=%zu", aContext[ctx_INDEX].width);
	}

	// Return index number
	return (uint32_t)ctx_INDEX;
}

uint32_t Create_Window(void* dwExStyle, const char* lpClassName,const char* lpWindowName, void* dwStyle, int Pos_X, int Pos_Y, int Siz_X, int Siz_Y, uint32_t hWndParent, void* hMenu, void* hInstance,void* lpParam)
{
	// This function allow to create simple Win32 window with Cpcdos SCI service.

	// ctx_INDEX 				: Numero INDEX du tableau aContext[]
	// ctx_id_context			: Numero de bitmap ID genere par cpc_create_viewport()
	// win_hndl					: Numero de handle de la fenetre cree par cpc_create_gui_objet() (Cpcdos)
	// cpc_get_id_from_handle()	: Recuperer le numero INDEX du tableau aContext[] depuis le handle de la fenetre

	// Corrections
	if(Pos_X <= 0) Pos_X = 10;
	if(Pos_X > 2000) Pos_X = 200;

	if(Pos_Y <= 0) Pos_Y = 10;
	if(Pos_Y > 2000) Pos_Y = 200;

	if(Siz_X < 0) Siz_X = 1;
	if(Siz_X > 2000) Siz_X = 2000;

	if(Siz_Y < 0) Siz_Y = 1;
	if(Siz_Y > 2000) Siz_Y = 2000;

	

	// Creating context buffer
	showinf("Create_Window() - Creating context %dx%d", Siz_X, Siz_Y);
	uint32_t ctx_INDEX = Create_context((ContextInf){.width=Siz_X, .height=Siz_Y}); // 
	uint32_t ctx_id_context = aContext[ctx_INDEX].id_context;
	showinf("Create_Window() Context INDEX=%zu", ctx_INDEX);

	if ((Siz_X > 5) && (Siz_Y > 5))
	{
		// Creating CPCDOS/WIN32 Window. Give context_handle number for Blit_context()
		showinf("Create_Window() - Creating window %dx%d from Cpcdos SCI service ", Siz_X, Siz_Y);
		uint32_t win_hndl = (uint32_t) cpc_create_gui_objet((long) /*hWndParent*/ ctx_id_context, ctx_INDEX, gui_window, Pos_X, Pos_Y, Siz_X, Siz_Y, lpWindowName, lpClassName, "NULL", "NULL");
		showinf("Create_Window() Window handle=%zu", win_hndl);

		return win_hndl;
	}

	return ctx_INDEX;

	
	
}

ContextInf* Blit_context(uint32_t _win_handle, const void* _pixels, int _SrcWidth)
{
	uint32_t _idx;
	if((_win_handle > 0) && (_win_handle < 10))
		_idx = _win_handle; // If handle is low, then it's not handle ! ;)
	else
		// Getting context_id from (cpcdos) Window handle
		_idx = cpc_get_id_from_handle(_win_handle);

	aContext[_idx].pixels = cpc_get_viewport_ptr((long) aContext[_idx].id_context);
	
	// User interactions
	UserInputUpdate(_idx, (long) aContext[_idx].id_context);

	// If witdh > 10 px
	if(aContext[_idx].width >= 1)
	{

		// Getting ptr source & destination
		uint32_t* pix_src = (uint32_t*)_pixels;
		uint32_t* pix_dest = (uint32_t*)aContext[_idx].pixels;
		
		// Write to ptr video buffer
		for(int y = 0; y <  aContext[_idx].height; y++){
			memcpy(pix_dest + (y * aContext[_idx].width), pix_src + (y * _SrcWidth), aContext[_idx].width *4);
		}

		_printl("hndl:%zu - Blit_context(%l) [%dx%d]", aContext[_idx].id_context, aContext[_idx].height, aContext[_idx].width);

		// Blit fram buffer to cpcdos SCI
		cpc_Blitter((long) aContext[_idx].id_context);

	}	

	return &aContext[_idx]; //number of scan lines copied
}

int UserInputUpdate(uint32_t h, long id_context)
{
	// cpc_mouse_state_lck() --> 0:Clic state (1:left 2:right 3:middle) | 1:Position X | 2:Position Y | 3:Scrool wheel

	// Getting clic state
	long clic = (long) cpc_mouse_state_lck(0, id_context);

	// Getting mouse position (relative to window with id)
	long posx = (long) cpc_mouse_state_lck(1, id_context);
	long posy = (long) cpc_mouse_state_lck(2, id_context);

	// ---- EVENTS ----

	// If user press clic
	if(clic > 0)
		aSysMsg(add,(XEGI_SysMsg){.handle=h, .type=XEGI_Msg_(LBUTTONDOWN)});
	
	// If user left clic
	if(clic == 0)
		aSysMsg(add,(XEGI_SysMsg){.handle=h, .type=XEGI_Msg_(LBUTTONUP)});
	
	// When user mouse move
	aSysMsg(add,(XEGI_SysMsg){.handle=h, .type=XEGI_Msg_(MOUSEMOVE), .x=posx, .y=posy });

	_printl("hndl:%zu - UserInputUpdate(%l) - Mouse state [clic:%ld] [%ldx%ld] ", h, id_context, clic, posx, posy);
}


uint32_t Sys_ProcessMsg(XEGI_SysMsg _msg)
{
	return 0;
}


uint32_t Sys_CreateThread(void* (* threadMain) (void * arg), unsigned long stackSize, void* threadParam)
{
	xe_cpinti_ENTRER_SectionCritique();
	_printl("[CPCDOS] Using CPinti Core threads");
	unsigned long result = xe_cpinti_creer_thread((void* (*) (void *)) threadMain, stackSize, (void*) threadParam, false);
	_printl("[CPCDOS] Results TID CPinti Core thread : %lu", result);
	xe_cpinti_SORTIR_SectionCritique();

	return result;
}


void Sys_EnterCriticalSection()
{
	// Entrer dans une section critique
	xe_cpinti_ENTRER_SectionCritique();
}

void Sys_TryEnterCriticalSection()
{
	// Entrer dans une section critique
	xe_cpinti_ENTRER_SectionCritique();
}

void Sys_LeaveCriticalSection()
{
	// Sortir d'une section critique
	xe_cpinti_SORTIR_SectionCritique();
}

void* Sys_GetCurrentThread()
{
	// Obtenir le thread courant
	return (void*) xe_cpinti_get_ThreadEnCours();
}

double Sys_GetCurrentThreadId()
{
	// Obtenir le thread courant
	return (double)  xe_cpinti_get_ThreadEnCours();
}

double Sys_GetCurrentProcessId()
{
	// Obtenir le thread courant
	return (double)  xe_cpinti_get_pid_from_tid();
}



//////////////// MESSAGES ////////////////

uint32_t XeGI_Get_ContextMsg(hdl_t _context){

    //aSysMsg(add,(XEGI_SysMsg){.handle=_context, .type=XEGI_Msg_(LBUTTONDOWN)});
    //aSysMsg(add,(XEGI_SysMsg){.handle=_context, .type=XEGI_Msg_(LBUTTONUP)});
    //aSysMsg(add,(XEGI_SysMsg){.handle=_context, .type=XEGI_Msg_(MOUSEMOVE), .x=MouseX, .y=MouseY });
    return 1;
}

//////////////////// THREAD ////////////////////

uintptr_t XeGI_CreateThread(XEGI_THREAD_START_ROUTINE threadMain, uint32_t stackSize, void* threadParam)
{
    uintptr_t thdl =0;

	if ((thdl = (uintptr_t)Sys_CreateThread((void* (*) (void *))threadMain, stackSize,(LPVOID)threadParam))){
		return thdl;
	}
	_printl("Error, no thread created");
	return 1;
}

void* XeGI_GetCurrentThread()
{
	// Obtenir le thread courant
	return Sys_GetCurrentThread();
	
}
void XeGI_EnterCriticalSection(void* _handle)
{

}
void XeGI_LeaveCriticalSection(void* _handle)
{

}

////////////////////// FILE //////////////
//typedef struct {
//    hdl_t handle;
//    uint32_t  pos;
//    uint32_t  size;
//    char*  path;
//} XEGI_FileOp;
size_t 
    XeGI_GetFileSize(XEGI_FileOp* _file)
{
    return 0;
}
bool 
    XeGI_ReadFile(XEGI_FileOp* _file)
{
    // _file->size = XeGI_GetFileSize(_file->path)
    // _file->data = malloc _file->size
    return false;
}
bool 
    XeGI_WriteFile(XEGI_FileOp* _file)
{
    return false;
}